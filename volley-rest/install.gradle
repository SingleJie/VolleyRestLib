apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'volley-rest'

    publishedGroupId = 'com.wenjackp.volley.lib'
    libraryName = 'volley-rest'
    artifact = 'volley-rest'

    libraryDescription = 'volley library'

    siteUrl = 'https://github.com/SingleJie/VolleyRestLib'
    gitUrl = 'https://github.com/SingleJie/VolleyRestLib.git'

    libraryVersion = '1.0.0'

    developerId = 'wen'
    developerName = 'jackp'
    developerEmail = 'WenJackp@126.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

configurations {
    javadocDeps
}

android.libraryVariants.all { variant ->
    println variant.javaCompile.classpath.files

        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            // title = ''
            // description = ''
            failOnError = false
            source = variant.javaCompile.source
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath =  //files(variant.javaCompile.classpath.files) + files(ext.androidJar);
                    files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            options {
                encoding "utf-8"
                links "http://docs.oracle.com/javase/8/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
        }
}


task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
//     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    classpath += project.files(configurations.compile.files,android.getBootClasspath().join(File.pathSeparator))
//    classpath += configurations.javadocDeps
    options.encoding = "UTF-8"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Bintray

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
allprojects {
    repositories {
        maven {
            url properties.getProperty("sdk.dir") + "/extras/android/m2repository"
        }
        mavenLocal()
        jcenter()
    }
}

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = properties.getProperty("bintray.gpg.password")
                //Optional. The passphrase for GPG signing'
            }
        }
    }
}


version = libraryVersion
group = publishedGroupId
